Y = YP_delta_CCA_IMT_24m
) %>% drop_na()
covs6 <- grep("_0m$", names(cf6), value = TRUE)
f6 <- if(length(covs6)>0) as.formula(paste("Y ~ W +", paste(covs6,collapse=" + "))) else as.formula("Y ~ W")
fit6_anc <- lm(f6, data = cf6); s6 <- summary(fit6_anc)
beta6    <- s6$coefficients["W","Estimate"]
se6      <- s6$coefficients["W","Std. Error"]
cf6$yhat6_anc <- predict(fit6_anc, cf6)
mse6_anc <- mean((cf6$yhat6_anc - cf6$Y)^2)
# CF
cf6_cf <- cf6 %>% mutate(
Z1 = ifelse(W == 0, chat_sitagliptin_delta, 0),
Z0 = ifelse(W == 1, chat_conventional_delta, 0)
)
fit6_cf   <- lm(update(f6, . ~ . + Z1 + Z0), data = cf6_cf)
cf6$yhat6_cf <- predict(fit6_cf, cf6_cf)
mse6_cf   <- mean((cf6$yhat6_cf - cf6$Y)^2)
# HAIPW
res6 <- haipw_stack(
cf6, "Sitagliptin", "Y", covs6,
list(
chatgpt = c("chat_sitagliptin_delta","chat_conventional_delta"),
deepseek = c("ds_sitagliptin_delta","ds_conventional_delta")
)
)
store_results("6", beta6, se6, mse6_anc, mse6_cf, res6$se)
}
### Trial 14
{
cf14 <- fread("trial14/trial14_counterfactuals.csv")
df14 <- cf14 %>%
mutate(
A = ifelse(Treatment == "TERECO", 1, 0),
Y = YP_6MWD_28w - X_6MWD_0w
) %>% drop_na()
covs14 <- grep("_0w$", names(df14), value = TRUE)
f14 <- if(length(covs14)>0) as.formula(paste("Y ~ A +", paste(covs14,collapse=" + "))) else as.formula("Y ~ A")
fit14_anc <- lm(f14, data = df14); s14 <- summary(fit14_anc)
beta14     <- s14$coefficients["A","Estimate"]
se14       <- s14$coefficients["A","Std. Error"]
df14$yhat14_anc <- predict(fit14_anc, df14)
mse14_anc  <- mean((df14$yhat14_anc - df14$Y)^2)
# CF
df14_cf <- df14 %>% mutate(
Z1 = ifelse(A == 0, chat_treatment_delta, 0),
Z0 = ifelse(A == 1, chat_control_delta,   0)
)
fit14_cf    <- lm(update(f14, . ~ . + Z1 + Z0), data = df14_cf)
df14$yhat14_cf <- predict(fit14_cf, df14_cf)
mse14_cf   <- mean((df14$yhat14_cf - df14$Y)^2)
# HAIPW
res14 <- haipw_stack(
df14, "TERECO", "Y", covs14,
list(
chatgpt  = c("chat_treatment_delta","chat_control_delta"),
deepseek = c("ds_treatment_delta","ds_control_delta")
)
)
store_results("14", beta14, se14, mse14_anc, mse14_cf, res14$se)
}
### Trial 17
{
cf17 <- fread("trial17/trial17_counterfactuals.csv")
df17 <- cf17 %>%
mutate(
A = ifelse(Treatment == "statin_pcsk9", 1, 0),
Y = YP_delta_LDL_24w
)
covs17 <- grep("_0w$", names(df17), value = TRUE)
f17 <- as.formula(paste("Y ~ A +", paste(covs17,collapse=" + ")))
fit17_anc <- lm(f17, data = df17); s17 <- summary(fit17_anc)
beta17      <- s17$coefficients["A","Estimate"]
se17        <- s17$coefficients["A","Std. Error"]
df17$yhat17_anc <- predict(fit17_anc, df17)
mse17_anc   <- mean((df17$yhat17_anc - df17$Y)^2)
# CF
df17_cf <- df17 %>% mutate(
Z1 = ifelse(A == 0, chat_treatment_delta, 0),
Z0 = ifelse(A == 1, chat_control_delta,   0)
)
fit17_cf     <- lm(update(f17, . ~ . + Z1 + Z0), data = df17_cf)
df17$yhat17_cf <- predict(fit17_cf, df17_cf)
mse17_cf    <- mean((df17$yhat17_cf - df17$Y)^2)
# HAIPW
res17 <- haipw_stack(
df17, "statin_pcsk9", "Y", covs17,
list(
chatgpt  = c("chat_treatment_delta","chat_control_delta"),
deepseek = c("ds_treatment_delta","ds_control_delta")
)
)
store_results("17", beta17, se17, mse17_anc, mse17_cf, res17$se)
}
### Trial 18
{
# -------------------------------------------------------------
# Trial 18: Load & preprocess (cf18 only)
# -------------------------------------------------------------
cf18 <- fread("trial18_counterfactuals.csv") %>%
mutate(
A = ifelse(Treatment == "Kanyakla", 1, 0),
Y = YP_time_to_disengaged_12m
) %>%
drop_na()
# baseline covariates ending in "_0m"
covs18 <- grep("_0m$", names(cf18), value = TRUE)
# build formula safely
if (length(covs18) > 0) {
f18 <- as.formula(paste("Y ~ A +", paste(covs18, collapse = " + ")))
} else {
f18 <- as.formula("Y ~ A")
}
# 1) ANCOVA
fit18_anc     <- lm(f18, data = cf18)
s18_anc       <- summary(fit18_anc)
beta18        <- s18_anc$coefficients["A", "Estimate"]
se18_beta     <- s18_anc$coefficients["A", "Std. Error"]
cf18$yhat18_anc <- predict(fit18_anc, cf18)
mse18_anc     <- mean((cf18$yhat18_anc - cf18$Y)^2)
# 2) Counterfactual regression
cf18_cf <- cf18 %>%
mutate(
Z1 = ifelse(A == 0, chat_intervention_days, 0),
Z0 = ifelse(A == 1, chat_control_days,      0)
)
fit18_cf      <- lm(update(f18, . ~ . + Z1 + Z0), data = cf18_cf)
cf18$yhat18_cf <- predict(fit18_cf, cf18_cf)
mse18_cf      <- mean((cf18$yhat18_cf - cf18$Y)^2)
# 3) HAIPW stacking
res18 <- haipw_stack(
cf18, "Kanyakla", "Y", covs18,
list(
chatgpt  = c("chat_intervention_days", "chat_control_days"),
deepseek = c("ds_intervention_days",   "ds_control_days")
)
)
# store everything
store_results("18", beta18, se18_beta, mse18_anc, mse18_cf, res18$se)
}
# 1) Full-sample AIPW influence curve
compute_aipw_full <- function(X, Y, W) {
pi_hat <- mean(W)
df1    <- as.data.frame(cbind(Y = Y[W==1],  X = X[W==1, , drop=FALSE]))
df0    <- as.data.frame(cbind(Y = Y[W==0],  X = X[W==0, , drop=FALSE]))
fit1   <- lm(Y ~ ., data = df1)
fit0   <- lm(Y ~ ., data = df0)
mu1    <- predict(fit1, newdata = as.data.frame(X))
mu0    <- predict(fit0, newdata = as.data.frame(X))
mu1 - mu0 +
(W * (Y - mu1))   / pi_hat -
((1 - W) * (Y - mu0)) / (1 - pi_hat)
}
# 2) Optimal-weight solver
compute_lambda <- function(Sigma) {
ones     <- rep(1, nrow(Sigma))
Sigma_inv <- tryCatch(
solve(Sigma),
error = function(e) solve(Sigma + diag(1e-10, nrow(Sigma)))
)
as.vector(Sigma_inv %*% ones / as.numeric(t(ones) %*% Sigma_inv %*% ones))
}
# 3) HAIPW stacking
haipw_stack <- function(df, treat_label, outcome, covariates, models) {
W      <- as.integer(df$Treatment == treat_label)
Y      <- df[[outcome]]
X_mat  <- model.matrix(
as.formula(paste0("~ ", paste(covariates, collapse = " + "))),
data = df
)[, -1, drop=FALSE]
pi_hat <- mean(W)
psi_list <- list(
aipw = compute_aipw_full(X_mat, Y, W)
)
for(name in names(models)) {
y1 <- models[[name]][1]
y0 <- models[[name]][2]
psi_list[[name]] <-
(W * (Y - df[[y1]])) / pi_hat -
((1 - W) * (Y - df[[y0]])) / (1 - pi_hat) +
(df[[y1]] - df[[y0]])
}
all_psi <- do.call(rbind, psi_list)
Sigma   <- cov(t(all_psi))
lambda  <- compute_lambda(Sigma)
phi    <- colSums(t(all_psi) * lambda)
ate    <- mean(phi)
se_ate <- sqrt(as.numeric(t(lambda) %*% Sigma %*% lambda) / nrow(df))
list(ate = ate, se = se_ate)
}
# Prepare storage
mse_list <- list()
se_list  <- list()
store_results <- function(trial, beta, se_beta, mse_anc, mse_cf, se_haipw) {
mse_list[[trial]] <<- tibble(
Trial = trial,
Model = c("ANCOVA", "Counterfactual Reg."),
MSE   = c(mse_anc, mse_cf)
)
se_list[[trial]] <<- tibble(
Trial     = trial,
Estimator = c("ANCOVA β̂", "HAIPW ATE"),
SE        = c(se_beta, se_haipw)
)
}
### Trial 2
{
df2   <- fread("trial2/trial2.csv")
chat2 <- fread("trial2/trial2_chatgpt_potential_outcomes.csv")
ds2   <- fread("trial2/trial2_deepseek_potential_outcomes.csv")
df2 <- df2 %>%
mutate(
A = ifelse(Treatment == "Ivermectin+Doxycycline", 1, 0),
Y = YP_recovery_time
) %>%
bind_cols(chat2, ds2)
covs2 <- c(
"X_agegrp_0d","X_sex_0d","X_fever_0d","X_cough_0d",
"X_respdiff_0d","X_comorb_0d","X_diabetes_0d","X_hyperten_0d"
)
f2       <- as.formula(paste("Y ~ A +", paste(covs2, collapse = " + ")))
fit2_anc <- lm(f2, data = df2)
s2       <- summary(fit2_anc)
beta2    <- s2$coefficients["A","Estimate"]
se2      <- s2$coefficients["A","Std. Error"]
df2$yhat_anc <- predict(fit2_anc, df2)
mse2_anc <- mean((df2$yhat_anc - df2$Y)^2)
# CF
df2 <- df2 %>%
mutate(
Z1 = ifelse(A == 0, chatgpt_y1, 0),
Z0 = ifelse(A == 1, chatgpt_y0, 0)
)
fit2_cf   <- lm(update(f2, . ~ . + Z1 + Z0), data = df2)
df2$yhat_cf <- predict(fit2_cf, df2)
mse2_cf   <- mean((df2$yhat_cf - df2$Y)^2)
# HAIPW
res2 <- haipw_stack(
df2, "Ivermectin+Doxycycline", "Y", covs2,
list(
chatgpt = c("chatgpt_y1","chatgpt_y0"),
deepseek = c("deepseek_y1","deepseek_y0")
)
)
store_results("2", beta2, se2, mse2_anc, mse2_cf, res2$se)
}
### Trial 4
{
df4 <- fread("trial4/trial4_counterfactuals.csv") %>%
mutate(
A = ifelse(Treatment == "VD", 1, 0),
Y = YP_delta_P3NP_6w
)
covs4 <- c(
"X_Sex_0w","X_Age_0w","X_BMI_0w","X_FIB4_0w",
"X_APRI_0w","X_VD_0w","X_AST_0w","X_ALT_0w",
"X_Plt_0w","X_TGF_0w","X_TIMP_0w","X_MMP_0w","X_P3NP_0w"
)
f4       <- as.formula(paste("Y ~ A +", paste(covs4, collapse = " + ")))
fit4_anc <- lm(f4, data = df4)
s4       <- summary(fit4_anc)
beta4    <- s4$coefficients["A","Estimate"]
se4      <- s4$coefficients["A","Std. Error"]
df4$yhat_anc <- predict(fit4_anc, df4)
mse4_anc <- mean((df4$yhat_anc - df4$Y)^2)
# CF
df4 <- df4 %>%
mutate(
Z1 = ifelse(A == 0, chatgpt_cf_VitD2, 0),
Z0 = ifelse(A == 1, chatgpt_cf_Placebo, 0)
)
fit4_cf   <- lm(update(f4, . ~ . + Z1 + Z0), data = df4)
df4$yhat_cf <- predict(fit4_cf, df4)
mse4_cf   <- mean((df4$yhat_cf - df4$Y)^2)
# HAIPW
res4 <- haipw_stack(
df4, "VD", "Y", covs4,
list(
chatgpt = c("chatgpt_cf_VitD2","chatgpt_cf_Placebo"),
deepseek = c("deepseek_cf_VitD2","deepseek_cf_Placebo")
)
)
store_results("4", beta4, se4, mse4_anc, mse4_cf, res4$se)
}
### Trial 6
{
cf6 <- fread("trial6/trial6_counterfactuals.csv") %>%
mutate(
W = ifelse(Treatment == "Sitagliptin", 1, 0),
Y = YP_delta_CCA_IMT_24m
) %>% drop_na()
covs6 <- grep("_0m$", names(cf6), value = TRUE)
f6 <- if(length(covs6)>0) as.formula(paste("Y ~ W +", paste(covs6,collapse=" + "))) else as.formula("Y ~ W")
fit6_anc <- lm(f6, data = cf6); s6 <- summary(fit6_anc)
beta6    <- s6$coefficients["W","Estimate"]
se6      <- s6$coefficients["W","Std. Error"]
cf6$yhat6_anc <- predict(fit6_anc, cf6)
mse6_anc <- mean((cf6$yhat6_anc - cf6$Y)^2)
# CF
cf6_cf <- cf6 %>% mutate(
Z1 = ifelse(W == 0, chat_sitagliptin_delta, 0),
Z0 = ifelse(W == 1, chat_conventional_delta, 0)
)
fit6_cf   <- lm(update(f6, . ~ . + Z1 + Z0), data = cf6_cf)
cf6$yhat6_cf <- predict(fit6_cf, cf6_cf)
mse6_cf   <- mean((cf6$yhat6_cf - cf6$Y)^2)
# HAIPW
res6 <- haipw_stack(
cf6, "Sitagliptin", "Y", covs6,
list(
chatgpt = c("chat_sitagliptin_delta","chat_conventional_delta"),
deepseek = c("ds_sitagliptin_delta","ds_conventional_delta")
)
)
store_results("6", beta6, se6, mse6_anc, mse6_cf, res6$se)
}
### Trial 14
{
cf14 <- fread("trial14/trial14_counterfactuals.csv")
df14 <- cf14 %>%
mutate(
A = ifelse(Treatment == "TERECO", 1, 0),
Y = YP_6MWD_28w - X_6MWD_0w
) %>% drop_na()
covs14 <- grep("_0w$", names(df14), value = TRUE)
f14 <- if(length(covs14)>0) as.formula(paste("Y ~ A +", paste(covs14,collapse=" + "))) else as.formula("Y ~ A")
fit14_anc <- lm(f14, data = df14); s14 <- summary(fit14_anc)
beta14     <- s14$coefficients["A","Estimate"]
se14       <- s14$coefficients["A","Std. Error"]
df14$yhat14_anc <- predict(fit14_anc, df14)
mse14_anc  <- mean((df14$yhat14_anc - df14$Y)^2)
# CF
df14_cf <- df14 %>% mutate(
Z1 = ifelse(A == 0, chat_treatment_delta, 0),
Z0 = ifelse(A == 1, chat_control_delta,   0)
)
fit14_cf    <- lm(update(f14, . ~ . + Z1 + Z0), data = df14_cf)
df14$yhat14_cf <- predict(fit14_cf, df14_cf)
mse14_cf   <- mean((df14$yhat14_cf - df14$Y)^2)
# HAIPW
res14 <- haipw_stack(
df14, "TERECO", "Y", covs14,
list(
chatgpt  = c("chat_treatment_delta","chat_control_delta"),
deepseek = c("ds_treatment_delta","ds_control_delta")
)
)
store_results("14", beta14, se14, mse14_anc, mse14_cf, res14$se)
}
### Trial 17
{
cf17 <- fread("trial17/trial17_counterfactuals.csv")
df17 <- cf17 %>%
mutate(
A = ifelse(Treatment == "statin_pcsk9", 1, 0),
Y = YP_delta_LDL_24w
)
covs17 <- grep("_0w$", names(df17), value = TRUE)
f17 <- as.formula(paste("Y ~ A +", paste(covs17,collapse=" + ")))
fit17_anc <- lm(f17, data = df17); s17 <- summary(fit17_anc)
beta17      <- s17$coefficients["A","Estimate"]
se17        <- s17$coefficients["A","Std. Error"]
df17$yhat17_anc <- predict(fit17_anc, df17)
mse17_anc   <- mean((df17$yhat17_anc - df17$Y)^2)
# CF
df17_cf <- df17 %>% mutate(
Z1 = ifelse(A == 0, chat_treatment_delta, 0),
Z0 = ifelse(A == 1, chat_control_delta,   0)
)
fit17_cf     <- lm(update(f17, . ~ . + Z1 + Z0), data = df17_cf)
df17$yhat17_cf <- predict(fit17_cf, df17_cf)
mse17_cf    <- mean((df17$yhat17_cf - df17$Y)^2)
# HAIPW
res17 <- haipw_stack(
df17, "statin_pcsk9", "Y", covs17,
list(
chatgpt  = c("chat_treatment_delta","chat_control_delta"),
deepseek = c("ds_treatment_delta","ds_control_delta")
)
)
store_results("17", beta17, se17, mse17_anc, mse17_cf, res17$se)
}
### Trial 18
{
# -------------------------------------------------------------
# Trial 18: Load & preprocess (cf18 only)
# -------------------------------------------------------------
cf18 <- fread("trial18/trial18_counterfactuals.csv") %>%
mutate(
A = ifelse(Treatment == "Kanyakla", 1, 0),
Y = YP_time_to_disengaged_12m
) %>%
drop_na()
# baseline covariates ending in "_0m"
covs18 <- grep("_0m$", names(cf18), value = TRUE)
# build formula safely
if (length(covs18) > 0) {
f18 <- as.formula(paste("Y ~ A +", paste(covs18, collapse = " + ")))
} else {
f18 <- as.formula("Y ~ A")
}
# 1) ANCOVA
fit18_anc     <- lm(f18, data = cf18)
s18_anc       <- summary(fit18_anc)
beta18        <- s18_anc$coefficients["A", "Estimate"]
se18_beta     <- s18_anc$coefficients["A", "Std. Error"]
cf18$yhat18_anc <- predict(fit18_anc, cf18)
mse18_anc     <- mean((cf18$yhat18_anc - cf18$Y)^2)
# 2) Counterfactual regression
cf18_cf <- cf18 %>%
mutate(
Z1 = ifelse(A == 0, chat_intervention_days, 0),
Z0 = ifelse(A == 1, chat_control_days,      0)
)
fit18_cf      <- lm(update(f18, . ~ . + Z1 + Z0), data = cf18_cf)
cf18$yhat18_cf <- predict(fit18_cf, cf18_cf)
mse18_cf      <- mean((cf18$yhat18_cf - cf18$Y)^2)
# 3) HAIPW stacking
res18 <- haipw_stack(
cf18, "Kanyakla", "Y", covs18,
list(
chatgpt  = c("chat_intervention_days", "chat_control_days"),
deepseek = c("ds_intervention_days",   "ds_control_days")
)
)
# store everything
store_results("18", beta18, se18_beta, mse18_anc, mse18_cf, res18$se)
}
### Trial 19
{
df19   <- fread("trial19/trial19.csv")
chat19 <- fread("trial19/trial19_chatgpt_potential_outcomes.csv")
ds19   <- fread("trial19/trial19_deepseek_potential_outcomes.csv")
df19 <- df19 %>%
mutate(
A = ifelse(Treatment == "Piggyback", 1, 0),
Y = YP_FHVP_CVP_GRADIENT
) %>% bind_cols(chat19, ds19)
covs19 <- c(
"X_RECIPIENT_AGE_YEARS_0d","X_RECIPIENT_GENDER_0d",
"X_MELD_SCORE_0d","X_CREATININE_0d",
"X_DONOR_AGE_YEARS_0d","X_GRAFT_SHARING_0d"
)
f19       <- as.formula(paste("Y ~ A +", paste(covs19,collapse=" + ")))
fit19_anc <- lm(f19, data = df19); s19 <- summary(fit19_anc)
beta19    <- s19$coefficients["A","Estimate"]
se19      <- s19$coefficients["A","Std. Error"]
df19$yhat19_anc <- predict(fit19_anc, df19)
mse19_anc <- mean((df19$yhat19_anc - df19$Y)^2)
# CF
df19_cf <- df19 %>% mutate(
Z1 = ifelse(A == 0, chatgpt_piggyback, 0),
Z0 = ifelse(A == 1, chatgpt_conventional, 0)
)
fit19_cf    <- lm(update(f19, . ~ . + Z1 + Z0), data = df19_cf)
df19$yhat19_cf <- predict(fit19_cf, df19_cf)
mse19_cf   <- mean((df19$yhat19_cf - df19$Y)^2)
# HAIPW
res19 <- haipw_stack(
df19, "Piggyback", "Y", covs19,
list(
chatgpt = c("chatgpt_piggyback","chatgpt_conventional"),
deepseek = c("deepseek_piggyback","deepseek_conventional")
)
)
store_results("19", beta19, se19, mse19_anc, mse19_cf, res19$se)
}
### Trial 26
{
df26   <- fread("trial26/trial26.csv")
chat26 <- fread("trial26/trial26_chatgpt_potential_adherence.csv")
ds26   <- fread("trial26/trial26_deepseek_potential_adherence.csv")
df26 <- df26 %>%
mutate(
A = ifelse(Treatment == "Reminder module", 1, 0),
Y = YP_delta_Adherence_6m
) %>% bind_cols(chat26, ds26)
covs26 <- c(
"X_Agecat_0m","X_Education_0m","X_Ethnicity_0m", "X_Socialsupport_0m",
"X_TB_status_0m","X_OI_index_0m","X_weight_0m","X_CD4_0m",
"X_viral_load_0m","X_Adherence_0m"
)
f26       <- as.formula(paste("Y ~ A +", paste(covs26,collapse=" + ")))
fit26_anc <- lm(f26,data=df26); s26 <- summary(fit26_anc)
beta26    <- s26$coefficients["A","Estimate"]
se26      <- s26$coefficients["A","Std. Error"]
df26$yhat26_anc <- predict(fit26_anc, df26)
mse26_anc <- mean((df26$yhat26_anc - df26$Y)^2)
# CF
df26_cf <- df26 %>% mutate(
Z1 = ifelse(A == 0, chatgpt_deltaadh_6m_1, 0),
Z0 = ifelse(A == 1, chatgpt_deltaadh_6m_0, 0)
)
fit26_cf    <- lm(update(f26, . ~ . + Z1 + Z0), data = df26_cf)
df26$yhat26_cf <- predict(fit26_cf, df26_cf)
mse26_cf   <- mean((df26$yhat26_cf - df26$Y)^2)
# HAIPW
res26 <- haipw_stack(
df26, "Reminder module", "Y", covs26,
list(
chatgpt = c("chatgpt_deltaadh_6m_1","chatgpt_deltaadh_6m_0"),
deepseek = c("deepseek_deltaadh_6m_1","deepseek_deltaadh_6m_0")
)
)
store_results("26", beta26, se26, mse26_anc, mse26_cf, res26$se)
}
# Combine across trials
mse_all <- bind_rows(mse_list)
se_all  <- bind_rows(se_list)
print(xtable(mse_all, digits = c(0, 0, 0, 3), caption = "Pooled MSE Results"),
include.rownames = FALSE, booktabs = TRUE, sanitize.text.function = identity)
print(xtable(se_all, digits = c(0, 0, 0, 3), caption = "Pooled SE Results"),
include.rownames = FALSE, booktabs = TRUE, sanitize.text.function = identity)
